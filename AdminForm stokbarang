import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;

public class AdminForm extends JFrame {
    private JTextField usernameField;
    private JPasswordField passwordField;
    private JButton loginButton;
    private JButton signUpButton;
    private JButton openDataBarangButton;
    private JButton openTransaksiButton; // Added button for opening TransaksiForm
    private JTextArea dataTextArea;

    private static final String DB_URL = "jdbc:mysql://localhost:3306/stokbarangfix";
    private static final String DB_USER = "root";
    private static final String DB_PASSWORD = "";

    // Static method for creating a connection
    private static Connection createConnection() throws SQLException {
        return DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
    }

    public AdminForm() {
        setTitle("Form Admin");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(400, 200);

        JPanel panel = new JPanel();
        panel.setLayout(new GridLayout(5, 2));  // Adjusted grid layout

        JLabel usernameLabel = new JLabel("Username:");
        usernameField = new JTextField();
        JLabel passwordLabel = new JLabel("Password:");
        passwordField = new JPasswordField();

        loginButton = new JButton("Login");
        signUpButton = new JButton("Sign Up");
        openDataBarangButton = new JButton("Open DataBarang");
        openTransaksiButton = new JButton("Open Transaksi"); // Added the "Open Transaksi" button

        dataTextArea = new JTextArea();
        dataTextArea.setEditable(false);

        panel.add(usernameLabel);
        panel.add(usernameField);
        panel.add(passwordLabel);
        panel.add(passwordField);
        panel.add(loginButton);
        panel.add(signUpButton);
        panel.add(openDataBarangButton);
        panel.add(openTransaksiButton);  // Added the "Open Transaksi" button

        add(panel, BorderLayout.CENTER);
        add(new JScrollPane(dataTextArea), BorderLayout.EAST);

        loginButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String username = usernameField.getText();
                char[] password = passwordField.getPassword();

                // Perform login by checking the database
                if (authenticateAdmin(username, String.valueOf(password))) {
                    JOptionPane.showMessageDialog(null, "Login berhasil!", "Admin", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, "Login gagal. Username atau password salah.", "Admin", JOptionPane.ERROR_MESSAGE);
                }

                usernameField.setText("");
                passwordField.setText("");
            }
        });

        signUpButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String username = usernameField.getText();
                char[] password = passwordField.getPassword();

                // Perform sign-up by adding data to the database
                if (registerAdmin(username, String.valueOf(password))) {
                    JOptionPane.showMessageDialog(null, "Sign Up berhasil!", "Admin", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, "Sign Up gagal. Username sudah terdaftar.", "Admin", JOptionPane.ERROR_MESSAGE);
                }

                usernameField.setText("");
                passwordField.setText("");
            }
        });

        openDataBarangButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                openDataBarang();
            }
        });

        openTransaksiButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                openTransaksiForm();
            }
        });
    }

    private void openDataBarang() {
        // Create an instance of the DataBarang class
        DataBarang dataBarang = new DataBarang();
        // Set it to be visible
        dataBarang.setVisible(true);
        // Dispose of the current AdminForm frame if needed
        dispose();
    }

    private void openTransaksiForm() {
        // Create an instance of the TransaksiForm class
        TransaksiForm transaksiForm = new TransaksiForm();
        // Set it to be visible
        transaksiForm.setVisible(true);
        // Dispose of the current AdminForm frame if needed
        dispose();
    }

    private boolean authenticateAdmin(String username, String password) {
        try (Connection conn = createConnection()) {
            String sql = "SELECT * FROM admin WHERE Username = ? AND Password = ?";
            try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
                pstmt.setString(1, username);
                pstmt.setString(2, password);

                return pstmt.executeQuery().next();
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Terjadi kesalahan saat mengakses database", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }

    private boolean registerAdmin(String username, String password) {
        try (Connection conn = createConnection()) {
            String sql = "INSERT INTO admin (Username, Password) VALUES (?, ?)";
            try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
                pstmt.setString(1, username);
                pstmt.setString(2, password);

                pstmt.executeUpdate();
                return true;
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Terjadi kesalahan saat mengakses database", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            AdminForm form = new AdminForm();
            form.setVisible(true);
        });
    }
}
